/////////////////////////////////////////////////////
//// CS 8803/4803 CGAI: Computer Graphics in AI Era
//// Assignment 1B: Neural SDF
/////////////////////////////////////////////////////

precision highp float;              //// set default precision of float variables to high precision

varying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)
uniform vec2 iResolution;           //// screen resolution (uniform, from CPU)
uniform float iTime;                //// time elapsed (uniform, from CPU)

#define PI 3.1415925359

const vec3 CAM_POS = vec3(0, 1, 0);

vec3 rotate(vec3 p, vec3 ax, float ro)
{
    return mix(dot(p, ax) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);
}

/////////////////////////////////////////////////////
//// sdf functions
/////////////////////////////////////////////////////

float sdfPlane(vec3 p, float h)
{
    return p.y - h;
}

float sdfSphere(vec3 p, vec3 c, float r)
{
    //// your implementation starts

    return length(p-c) - r;
    
    //// your implementation ends
}

/////////////////////////////////////////////////////
//// Step 1: training a neural SDF model
//// You are asked to train your own neural SDF model on Colab. 
//// Your implementation should take place in neural_sdf.ipynb.
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 2: copy neural SDF weights to GLSL
//// In this step, you are asked to the network weights you have trained from the text file to the function sdfCow().
//// You should replace the default implementation (a sphere) with your own network weights. 
/////////////////////////////////////////////////////

float sdfCharmander(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);
    p = rotate(p, vec3(0., 0, 1.), PI*5.0/6.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts

    vec4 f0_0=sin(p.y*vec4(-2.78,.55,2.60,5.06)+p.z*vec4(-.48,4.55,-4.65,.54)+p.x*vec4(-.52,3.78,1.10,-4.90)+vec4(-1.65,9.36,12.56,5.32));
vec4 f0_1=sin(p.y*vec4(-4.62,-3.65,2.88,1.30)+p.z*vec4(8.61,.51,-1.81,1.31)+p.x*vec4(-4.22,-5.05,-2.39,-6.08)+vec4(-12.91,-14.17,-14.14,-2.50));
vec4 f0_2=sin(p.y*vec4(-.90,2.15,5.73,-5.13)+p.z*vec4(-1.11,4.24,6.41,-2.24)+p.x*vec4(3.87,4.85,4.49,4.97)+vec4(11.78,5.91,-4.51,-1.18));
vec4 f0_3=sin(p.y*vec4(1.10,-5.98,.10,-4.62)+p.z*vec4(-2.41,-1.90,.30,2.63)+p.x*vec4(-1.37,-2.91,-3.42,4.55)+vec4(6.48,-7.08,2.76,-4.59));
vec4 f1_0=sin(mat4(-.06,-.64,-.29,-.10,-.04,-.24,.12,.49,-.61,-.21,-.32,.43,.20,.17,-.17,.61)*f0_0+
    mat4(.11,-.10,-.13,.01,-.32,-.14,.09,-.35,-.06,-.20,-.37,-.31,-.04,.42,.25,-.10)*f0_1+
    mat4(.42,-.56,.10,.36,-.29,-.16,.11,.51,-.28,.20,.16,.30,-.35,-.14,.08,-.01)*f0_2+
    mat4(-1.20,.26,.20,.76,.11,-.09,.29,.63,-.27,.16,.26,.45,-.01,-.04,-.07,.07)*f0_3+
    vec4(-5.33,5.37,-4.46,3.89))/1.0+f0_0;
vec4 f1_1=sin(mat4(-.32,-.79,.43,-.23,-.25,-.49,-.29,-.10,.13,.18,-.09,-.01,-.17,-.15,.10,.28)*f0_0+
    mat4(.27,-.08,.03,-.08,-.04,-.31,.38,.15,.19,.12,.02,-.13,-.25,.01,-.15,.66)*f0_1+
    mat4(-.23,-.09,.58,.13,-.16,.24,-.41,.04,.05,.08,.10,.23,.06,.01,-.03,-.10)*f0_2+
    mat4(-.61,.24,.15,-.94,-.34,.06,-.08,.15,-1.12,1.11,-.25,.02,.52,-.08,-.15,-.21)*f0_3+
    vec4(3.12,5.90,2.21,-3.46))/1.0+f0_1;
vec4 f1_2=sin(mat4(-.12,.24,-.56,-.71,-.34,.21,.69,-.46,.32,-.08,.09,.36,.01,-.08,-.27,.05)*f0_0+
    mat4(-.11,-.18,.05,-.02,-.43,-.04,-.18,-.72,-.42,-.24,-.44,-.85,.18,.10,.48,.34)*f0_1+
    mat4(.30,.88,-.58,.70,.01,-.33,.34,-.82,-.06,.20,-.17,.08,-.08,.00,.18,-.14)*f0_2+
    mat4(-.15,.09,.88,.95,.03,-.16,-.15,-.40,.69,.04,-.75,.32,-.09,.01,-.13,.08)*f0_3+
    vec4(-3.72,-.89,-5.39,2.59))/1.0+f0_2;
vec4 f1_3=sin(mat4(.43,.46,-.41,-.65,.40,-.29,-.65,-.64,.25,-1.12,.27,.11,-.03,-.44,-.26,-.20)*f0_0+
    mat4(.20,-.06,.13,.03,.46,-.32,-.29,-.24,-.24,-.80,.57,-.08,-.50,-.13,-.34,-.15)*f0_1+
    mat4(.40,-.11,-.21,.51,.60,-.27,.01,-.62,-.08,.01,.11,.11,.03,.27,.71,-.05)*f0_2+
    mat4(-.65,-.98,-1.49,.58,.10,-.84,-.29,.38,.04,-.01,-.23,.03,-.02,.03,.01,.57)*f0_3+
    vec4(-.81,.02,3.79,3.38))/1.0+f0_3;
vec4 f2_0=sin(mat4(-.61,-.17,-.37,-.37,.04,.58,-.44,-.15,.64,.15,-.62,-.60,-.28,-.18,.47,.45)*f1_0+
    mat4(.02,.11,-.02,.46,-.10,.04,.35,.64,-.75,-.70,.47,-.11,-.12,.21,.39,.51)*f1_1+
    mat4(.76,-.58,-.08,.54,.12,.67,-.04,.18,.06,-.50,.05,-.27,.18,-.02,.01,.32)*f1_2+
    mat4(-.67,-.97,.08,.36,.40,.17,.19,-.30,.64,-.11,-.05,-.22,.29,-.27,.17,.41)*f1_3+
    vec4(-3.87,-6.06,-4.28,3.15))/1.4+f1_0;
vec4 f2_1=sin(mat4(-.13,-.58,-.59,.69,-.31,.15,.46,.84,-.55,.54,.47,.66,.14,.18,.75,-.28)*f1_0+
    mat4(-.03,.02,.01,.04,-.62,-.45,-.02,.69,.26,-.18,-.01,-.28,.24,.63,.72,-.61)*f1_1+
    mat4(.38,-.33,.15,-.06,.41,-.06,.03,.16,-.27,.27,-.15,-.08,-.26,-.14,-.01,.08)*f1_2+
    mat4(1.16,.07,-.17,-.61,-.23,-.07,.47,-.15,-.14,.21,-.49,-.05,.25,.01,.06,-.35)*f1_3+
    vec4(4.45,-.68,-4.76,-4.29))/1.4+f1_1;
vec4 f2_2=sin(mat4(.27,-.17,-.09,.15,-1.38,-.15,-.22,.44,-.05,.06,-.36,.19,.56,-.13,.31,-.38)*f1_0+
    mat4(-.49,-.03,.03,-.24,-.56,-.06,.03,.36,.33,.70,.47,-.49,.55,-.30,.17,-.22)*f1_1+
    mat4(.33,-.19,.42,-.23,-.51,-.14,-.69,.27,.41,-.04,.01,-.11,-.01,-.30,-.49,.24)*f1_2+
    mat4(1.24,.29,.10,-.36,-.33,-.22,.34,.55,.66,.10,-.27,.11,-.50,.03,-.08,.48)*f1_3+
    vec4(-4.89,4.21,-4.79,-.67))/1.4+f1_2;
vec4 f2_3=sin(mat4(.51,.02,-.21,.62,.55,-.40,-.40,-.52,.33,-.11,.08,.15,-.13,-.68,.10,-.07)*f1_0+
    mat4(-.62,.35,.01,.20,.02,-.15,-.25,.03,.92,-.06,-.12,1.02,-.50,-.28,-.17,-.05)*f1_1+
    mat4(.71,.54,-.51,-.21,.02,-.39,-.06,-.10,-.64,-.40,-.06,.20,.04,.29,.13,.34)*f1_2+
    mat4(-.36,.16,.10,.20,-.50,-.55,.06,-.03,-.14,.01,.21,-.32,-.03,-.06,-.30,-.25)*f1_3+
    vec4(-.86,-6.09,-4.07,4.90))/1.4+f1_3;
vec4 f3_0=sin(mat4(.00,.22,.22,-.99,.55,.45,.09,.45,-.57,-.29,-.54,-.22,-.09,.28,.10,.02)*f2_0+
    mat4(.38,-.02,-.13,.63,.46,1.28,.45,-.08,.42,.18,.32,-.45,-.22,.34,.46,.43)*f2_1+
    mat4(-.85,.02,.15,-.98,-.44,.10,.10,-.40,-.06,.03,-.06,-.22,-.28,.44,.11,.26)*f2_2+
    mat4(-.04,-.13,-.28,.33,-.11,.77,-.34,-.14,-.27,-.26,-.04,-.26,.62,-.42,-.00,.19)*f2_3+
    vec4(-3.89,-5.35,-4.14,1.91))/1.7+f2_0;
vec4 f3_1=sin(mat4(.35,.04,.25,.46,-.12,.10,.08,.71,.68,-.14,-.39,-.32,-.18,-.10,.15,-.00)*f2_0+
    mat4(-.12,-.02,.46,.09,.51,-.45,.11,.17,-.51,.05,-.51,-.11,.42,-.45,-.02,-.83)*f2_1+
    mat4(-.02,.53,-.03,.25,.20,-.40,.23,-.16,.40,.08,.32,-.01,.65,.44,1.54,.14)*f2_2+
    mat4(-.13,-.38,-.07,-.05,.60,-.50,-.42,-.37,.16,.23,.39,-.06,-.35,.14,.09,.14)*f2_3+
    vec4(-3.36,3.72,-5.50,2.83))/1.7+f2_1;
vec4 f3_2=sin(mat4(.17,.25,-.30,-.27,.79,.10,.61,-.55,.50,.31,-.06,-.26,-.63,.16,.36,-.38)*f2_0+
    mat4(.42,-.11,-.40,-.47,-.67,-.19,-.19,.13,1.30,-.03,.60,.37,-.29,.57,.87,-.58)*f2_1+
    mat4(.24,.54,.06,-.79,.74,-.41,-.10,.51,-.83,.27,.23,-.34,.51,.04,.36,-.65)*f2_2+
    mat4(-.43,-.35,-.26,.21,-.50,.13,-.37,-.21,.36,.04,.26,.57,-.95,.10,-.54,.31)*f2_3+
    vec4(-5.05,-3.28,.64,-5.67))/1.7+f2_2;
vec4 f3_3=sin(mat4(.38,-.30,-.16,.04,.46,-.33,.49,.34,.35,.12,-.01,-.43,-.25,-.42,.40,-.05)*f2_0+
    mat4(-.66,-.04,.25,.20,-.00,-.70,.36,.05,-.55,.11,-.89,-.62,-.42,-.08,.29,.09)*f2_1+
    mat4(.28,.50,-.53,-.64,-.36,-.64,.36,-.07,.30,-.03,-.24,-.02,.01,.06,.08,-.11)*f2_2+
    mat4(.44,-.23,.46,-.13,-.25,-.74,.45,-.50,.11,.71,-.54,-.11,-.01,.06,.11,-.13)*f2_3+
    vec4(-5.51,-.31,-2.48,3.12))/1.7+f2_3;
return dot(f3_0,vec4(.03,-.10,.04,.00))+
    dot(f3_1,vec4(-.05,-.05,.02,.04))+
    dot(f3_2,vec4(.02,-.05,.04,-.03))+
    dot(f3_3,vec4(.02,.04,.03,.04))+
    -0.207;
}


float sdfBulb(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);
    p = rotate(p, vec3(0., 0, 1.), PI*5.0/6.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    vec4 f0_0=sin(p.y*vec4(2.57,-.71,-4.01,-3.52)+p.z*vec4(-3.00,-3.94,1.25,-1.35)+p.x*vec4(3.61,-1.01,-3.67,-3.78)+vec4(-7.28,-.75,-3.94,-.30));
vec4 f0_1=sin(p.y*vec4(-3.38,-3.00,-2.46,-1.73)+p.z*vec4(3.35,-1.21,-4.28,1.71)+p.x*vec4(2.50,4.39,2.52,-.95)+vec4(7.01,8.46,-.60,6.13));
vec4 f0_2=sin(p.y*vec4(2.86,3.86,-3.71,-.94)+p.z*vec4(-1.28,-.97,-2.63,-3.35)+p.x*vec4(-2.16,-2.41,-2.96,1.46)+vec4(1.91,-4.00,-.24,-4.42));
vec4 f0_3=sin(p.y*vec4(-2.19,-1.25,-2.51,-3.58)+p.z*vec4(-2.51,1.66,-.36,-1.52)+p.x*vec4(3.96,-3.97,-.67,-2.93)+vec4(6.16,-7.56,4.42,4.72));
vec4 f1_0=sin(mat4(.23,.13,.38,-.33,-.11,.34,.30,.50,-.14,.30,-.18,.13,-.08,.24,.14,.42)*f0_0+
    mat4(-.34,.33,.36,-.44,.00,-.28,-.15,-.23,-.54,.45,-.29,.02,.51,-.19,.46,-.19)*f0_1+
    mat4(-.40,.79,-.30,.96,-.30,-.31,-.37,.20,-.55,-.14,.56,-.35,-.18,.02,.05,.62)*f0_2+
    mat4(-.27,-.56,-.35,-.30,-.12,.15,-.33,.43,-.43,-.38,-.73,-.12,-.15,.41,-.35,-.30)*f0_3+
    vec4(-1.46,-.30,-.01,-2.43))/1.0+f0_0;
vec4 f1_1=sin(mat4(-.10,-.11,.57,-.30,-.42,.44,-.25,.29,.50,-.28,.46,.09,-.05,.11,.58,.14)*f0_0+
    mat4(-.02,.06,-.20,-.18,-.42,-.18,.63,-.10,-.10,-.07,.60,.25,.26,-.59,.46,-.33)*f0_1+
    mat4(.19,-.55,-.17,.07,.12,.03,.53,.31,-.11,.28,-.30,-.21,.18,-.31,.51,.54)*f0_2+
    mat4(.24,.45,.42,-.01,.12,.46,-.19,-.35,-.15,.07,.37,.27,.08,.37,-.36,-.17)*f0_3+
    vec4(2.52,-3.44,2.41,2.15))/1.0+f0_1;
vec4 f1_2=sin(mat4(.12,.33,-.57,-.29,-.36,-.29,.28,-.07,-.26,-.54,-.79,.11,-.21,-.33,.35,-.13)*f0_0+
    mat4(.18,.03,-.30,-.50,.18,-.03,.47,.96,-.21,.73,.10,.13,-.11,.33,-.55,.27)*f0_1+
    mat4(.59,.27,.30,.09,-.15,-.19,.09,.21,-.10,.02,-.42,-.32,.17,.15,.32,-.25)*f0_2+
    mat4(.14,-.06,-.02,.50,.02,.04,-.33,-.01,-.13,-.64,-.13,-.22,.24,-.09,-.12,-.28)*f0_3+
    vec4(-1.42,-3.05,-3.22,-3.17))/1.0+f0_2;
vec4 f1_3=sin(mat4(.21,-.13,-.04,-.18,-.08,-.07,-.11,-.21,.30,.17,-.06,.13,-.63,.31,-.22,.24)*f0_0+
    mat4(-.04,-.09,.14,-.09,.10,-.05,-.66,.19,.25,.00,-.28,.51,-.12,-.50,.53,.35)*f0_1+
    mat4(-.63,.22,.31,-.42,-.53,-.80,-.02,-.20,.25,-.69,.64,-.62,.35,-.65,.21,.38)*f0_2+
    mat4(-.09,-.13,-.31,-.37,-.01,.59,.08,-.25,.20,-.73,-.14,.69,.14,.36,-.12,.02)*f0_3+
    vec4(-1.66,1.31,-3.54,-.69))/1.0+f0_3;
vec4 f2_0=sin(mat4(-.23,.09,-.26,-.44,-.08,-.21,-.15,.30,-.20,1.47,.24,.15,-.03,-.02,.11,-.84)*f1_0+
    mat4(.26,-.28,.10,.67,.48,-.12,.23,.13,.80,-.16,-.32,.10,.16,.06,-.51,.69)*f1_1+
    mat4(.54,.11,.78,-.17,.67,-.37,.21,-.14,-.21,-.55,.37,-.11,.88,.27,-.19,-.20)*f1_2+
    mat4(.11,.56,-.33,.23,.43,.12,-.37,-.49,-.20,.41,.35,-.05,-.34,.52,-.18,.48)*f1_3+
    vec4(.99,1.17,1.39,-2.04))/1.4+f1_0;
vec4 f2_1=sin(mat4(.26,.39,-.26,-.13,.46,.57,-.39,-.03,.19,-.31,-.44,.21,.63,-.36,-.30,.43)*f1_0+
    mat4(.39,-.73,.35,.04,.52,-.15,-.36,.16,.02,-.57,.22,.27,-.59,-.82,-.57,-.11)*f1_1+
    mat4(.43,.08,-.32,-.20,.28,.15,-.16,.04,.19,.39,.05,.15,.02,-.39,.26,.49)*f1_2+
    mat4(.08,-.48,-.02,.48,.12,.32,-.15,-.50,.16,.22,1.00,-.36,.27,-.29,-.13,-.63)*f1_3+
    vec4(3.44,-3.46,1.94,-2.70))/1.4+f1_1;
vec4 f2_2=sin(mat4(-.22,.25,-.05,-.19,.37,-.35,-.43,.13,-.22,.01,.59,.02,-.09,.21,.49,-.64)*f1_0+
    mat4(-.42,.17,.61,.35,-.22,-.15,.10,.11,.40,-.54,.22,-.08,.49,.05,.32,.48)*f1_1+
    mat4(.40,-.61,-.27,-.05,.39,.34,-.20,-.97,-.33,-.15,-.02,.64,-.30,-.23,-.48,-.53)*f1_2+
    mat4(-.10,1.01,.00,.12,.80,.06,-.19,-.43,-.48,.21,.35,-.45,-.15,.01,-.49,.69)*f1_3+
    vec4(.21,1.51,-1.65,1.81))/1.4+f1_2;
vec4 f2_3=sin(mat4(-.32,.25,.01,-.02,.47,.42,.43,.31,.38,.05,.44,-.43,.45,-.26,.54,.00)*f1_0+
    mat4(.02,-.04,1.05,-.55,-.05,.07,-.47,.02,-.17,.18,-.29,-.27,.45,-.13,-.26,-1.20)*f1_1+
    mat4(-.30,-.18,.69,-.19,-.14,-.06,-.08,.23,-.08,.34,.13,.17,.39,-.50,.05,.05)*f1_2+
    mat4(-.28,.24,-.09,-.55,.52,.01,-.33,-.61,.64,.27,.07,.83,.61,.00,.16,-.03)*f1_3+
    vec4(-.39,-2.57,1.07,-1.50))/1.4+f1_3;
vec4 f3_0=sin(mat4(-.42,-.26,-.49,-.68,.73,-.45,.33,.25,-.66,-.66,-.23,.02,-.33,.07,.59,.18)*f2_0+
    mat4(-.31,-.40,-.07,-.39,-.00,-.36,.27,.88,-.48,.33,.24,.17,-.17,-.02,.43,-.83)*f2_1+
    mat4(.65,.51,-.59,.36,.25,-.30,-.14,.42,.32,.15,-.16,1.03,-.11,.59,.14,-.25)*f2_2+
    mat4(.53,-.46,.28,-.46,-.15,-.09,-.48,-.39,-.20,.39,.06,.11,.34,-.49,.08,-1.19)*f2_3+
    vec4(2.53,-.91,.24,-3.34))/1.7+f2_0;
vec4 f3_1=sin(mat4(-.57,-.12,.25,.20,-.52,-.17,.38,.02,.31,.33,-.07,-.22,.19,.61,-.40,.42)*f2_0+
    mat4(.47,.42,-.60,-.49,-.27,-.04,-.53,.43,.37,-.37,.16,.05,.36,.27,-.19,-.04)*f2_1+
    mat4(-.16,.25,.69,-.04,-.26,-.07,-.52,-.47,.06,-.31,-.25,.42,.07,-.05,-.55,-.05)*f2_2+
    mat4(-.03,-.35,-.37,.06,.36,-.04,-.07,-.37,-.07,-.02,.55,.10,-.49,.21,-.57,-.22)*f2_3+
    vec4(.45,-2.00,-2.85,1.26))/1.7+f2_1;
vec4 f3_2=sin(mat4(-.08,-.24,-.36,-.62,.11,.42,.37,-.27,-.13,-.05,-.89,.29,.70,-.03,.41,.53)*f2_0+
    mat4(-.67,-.09,.64,-.48,.00,-.09,.27,.10,-.14,.57,-.30,.00,.74,.38,-.02,-.40)*f2_1+
    mat4(.20,.17,-.26,.03,.69,.55,-.06,.55,-.34,.16,-.07,.25,.46,.14,.34,-.59)*f2_2+
    mat4(-.08,.39,.56,-.42,.26,.55,.61,.66,.23,.11,.07,-.16,.10,.66,-.47,.51)*f2_3+
    vec4(-3.28,-2.71,-.68,-3.11))/1.7+f2_2;
vec4 f3_3=sin(mat4(-.77,-.96,.04,-.24,-.24,.12,.57,.85,-.06,-.17,-.67,-.28,-.12,.05,.15,-.65)*f2_0+
    mat4(-.11,-.28,.09,.11,.14,.64,-.02,-.50,-.94,.03,-.44,-.07,.43,.37,-.34,.41)*f2_1+
    mat4(-.11,-.52,.24,.22,-1.05,-.01,.15,.32,.70,-.01,.44,.03,.02,.04,-.15,.03)*f2_2+
    mat4(.18,.50,-.14,-.12,-.28,-.07,.47,.52,-.66,.07,.51,.17,-.18,-.83,.55,.68)*f2_3+
    vec4(-1.53,1.04,1.98,-.54))/1.7+f2_3;
vec4 f4_0=sin(mat4(.39,-.65,-.08,-.54,-.21,-.06,.36,-.79,-.02,.01,.33,.31,.01,.22,-.41,-.21)*f3_0+
    mat4(-.11,.53,.01,.58,-.04,.24,-.08,-.56,.20,-.82,-.13,-.87,-.36,.45,.05,.36)*f3_1+
    mat4(.26,.19,-.59,-.46,-.56,.23,.59,.64,-.06,-.65,.19,.00,-.41,.53,-.11,-.10)*f3_2+
    mat4(-.20,-.42,.16,.05,.91,-.53,.24,-.23,.47,-.04,.19,-1.08,.19,.06,.64,-.25)*f3_3+
    vec4(1.26,-.77,.43,-2.34))/2.0+f3_0;
vec4 f4_1=sin(mat4(-.21,.39,-.21,.61,-.66,-.11,-.55,.58,.00,.08,-.18,.25,.31,-.19,-.40,.37)*f3_0+
    mat4(-.79,-.19,-.43,.44,-.13,.47,-.47,.16,.53,-.05,.54,-.40,.17,-.25,-.47,.27)*f3_1+
    mat4(.34,-.45,-.33,-.73,.47,.33,-.78,-.64,.64,-.28,-.19,-.41,.02,-.31,-.29,-.42)*f3_2+
    mat4(-.53,.54,-.91,.47,-.21,.03,-.49,-.47,-.49,.07,.17,-.13,-.30,-.15,-.04,-.22)*f3_3+
    vec4(-1.29,-1.13,-2.37,3.58))/2.0+f3_1;
vec4 f4_2=sin(mat4(-.30,-.92,.32,.55,.53,-.13,.03,.06,-.06,-.26,.06,-.27,-.49,-.31,.30,-.73)*f3_0+
    mat4(.45,-1.21,-.31,-.33,.02,-.25,.16,-.43,.28,.27,-.11,.20,.59,-.24,.58,.17)*f3_1+
    mat4(-.28,-.28,.38,.03,.25,.24,.06,.14,.49,-.01,-.30,-.11,-.26,.02,-.66,-.29)*f3_2+
    mat4(-.15,-.88,.17,-.83,.64,.48,-.21,-.26,.09,-.09,-.19,-.33,-.42,-.50,.81,.11)*f3_3+
    vec4(.04,1.46,3.39,2.57))/2.0+f3_2;
vec4 f4_3=sin(mat4(.25,1.15,.82,1.10,.21,-.85,-.73,-.30,.07,.44,.03,.10,-.26,-.12,.46,.52)*f3_0+
    mat4(.01,-.55,-.15,-.76,.44,-.61,.33,.34,-.51,-.95,-.15,.14,-.12,.49,.32,-.25)*f3_1+
    mat4(.20,.77,.76,.69,-.27,-.40,.36,.00,1.05,-.40,-.15,-.32,.65,-.14,.64,-.54)*f3_2+
    mat4(-.56,-.17,.51,.48,-.68,-.98,-.63,.84,-.06,-.74,-.18,1.18,-.03,.90,.01,-.58)*f3_3+
    vec4(2.69,2.94,-2.19,-4.43))/2.0+f3_3;
return dot(f4_0,vec4(.05,-.04,.06,.02))+
    dot(f4_1,vec4(.06,-.09,-.03,.07))+
    dot(f4_2,vec4(-.06,.04,-.04,-.03))+
    dot(f4_3,vec4(.01,-.01,.05,.02))+
    -0.024;

}

float sdfSquirtle(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);
    p = rotate(p, vec3(0., 0, 1.), PI*5.0/6.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    vec4 f0_0=sin(p.y*vec4(-2.31,1.78,-1.05,-2.22)+p.z*vec4(-3.41,-2.80,-4.13,-1.45)+p.x*vec4(1.52,-3.05,-4.39,-.77)+vec4(7.54,-1.59,6.97,-4.87));
vec4 f0_1=sin(p.y*vec4(-2.28,-1.28,-1.12,-.13)+p.z*vec4(-3.27,-1.01,-2.46,-3.40)+p.x*vec4(4.78,-3.78,-3.53,-1.34)+vec4(7.73,4.42,-7.58,1.89));
vec4 f0_2=sin(p.y*vec4(-.53,.58,2.69,-3.23)+p.z*vec4(-4.90,.93,-2.54,-.58)+p.x*vec4(-2.56,.41,2.93,1.43)+vec4(1.65,-2.60,-3.96,1.92));
vec4 f0_3=sin(p.y*vec4(-3.65,-2.64,-2.74,-3.63)+p.z*vec4(-1.82,-2.83,-3.69,-3.98)+p.x*vec4(.00,3.17,1.58,-2.67)+vec4(-.47,5.89,-7.31,6.65));
vec4 f1_0=sin(mat4(.20,.03,.25,-.50,.15,.06,.59,.25,-.41,-.21,-.02,.44,-.21,-.14,-.28,.37)*f0_0+
    mat4(-.10,.15,-.03,.23,.19,-.41,-.47,-.73,-.34,.35,-.06,.10,-.80,.38,.56,.55)*f0_1+
    mat4(-.21,-.06,.26,-.41,.39,-.76,.64,1.32,.14,-.41,-.44,-.19,-.64,.32,-.00,.14)*f0_2+
    mat4(-.62,-.32,.69,.17,-.34,.08,-.01,-.01,-.55,-.29,-.01,-.18,.34,-.15,.08,.18)*f0_3+
    vec4(1.18,.84,-2.60,-2.21))/1.0+f0_0;
vec4 f1_1=sin(mat4(.02,-.05,.19,-.44,.19,.33,.43,.73,.30,.07,.40,-.68,.33,.17,-.18,.59)*f0_0+
    mat4(.27,.20,.05,-.14,.49,.41,-.07,-.22,.25,.04,.11,-.43,-.11,-.28,1.18,-.75)*f0_1+
    mat4(-.23,-.78,-.43,.64,-.11,-.24,.44,.14,-.19,-.41,.02,-.38,-.09,-.11,-.55,.37)*f0_2+
    mat4(.58,-.34,-.71,.19,.07,.26,.14,-.43,-.10,-.45,.10,-.54,.23,.54,.22,-.29)*f0_3+
    vec4(-3.27,-.57,2.81,.57))/1.0+f0_1;
vec4 f1_2=sin(mat4(.21,-.02,.49,-.37,-.12,.16,.44,.17,.32,.11,-.21,.09,-.18,-.85,.12,-.37)*f0_0+
    mat4(-.14,.13,-.37,.02,-.24,.05,.21,.26,-.13,.38,.05,-.62,-.70,.31,.62,.37)*f0_1+
    mat4(.66,-.26,-.10,-.26,1.05,.32,.45,-.75,-.14,-.25,-.32,-.31,.24,.10,.27,-.32)*f0_2+
    mat4(.11,-.57,.26,-.15,.47,-.63,.08,-.45,.26,-.40,-.06,-.03,.08,.04,.33,.23)*f0_3+
    vec4(-3.39,-3.24,.43,-2.54))/1.0+f0_2;
vec4 f1_3=sin(mat4(.28,-.29,.29,-.13,-.08,-.13,-.25,-.06,.20,.08,-.20,.31,.24,.45,-.25,-.55)*f0_0+
    mat4(.04,.01,.01,-.21,-.32,.22,-.25,.13,.64,-.02,.11,.68,.54,.02,-.30,-.46)*f0_1+
    mat4(.02,-.40,.99,-.23,-.52,.72,.74,-.72,.41,.18,-.39,-.18,.56,.43,-.07,.50)*f0_2+
    mat4(-.34,-.01,-.37,-.46,-.31,.41,-.04,.06,.72,.34,.13,.21,.64,.25,.24,.03)*f0_3+
    vec4(3.01,2.33,1.93,1.26))/1.0+f0_3;
vec4 f2_0=sin(mat4(.19,.55,.08,.20,-.02,.52,.17,.64,.25,.02,.14,-.26,-.45,-.87,.46,.16)*f1_0+
    mat4(.01,.46,.33,.25,.55,-.25,.11,-.58,.45,.78,-.48,-.50,-.02,.04,.07,-.61)*f1_1+
    mat4(.57,.27,.40,-.03,-.56,.80,-.20,-.27,-.54,-.08,.14,-.63,.08,.21,.88,-.15)*f1_2+
    mat4(-.07,-.09,.35,-.66,.22,-.23,.43,.67,.07,-.53,.11,.26,.29,-.05,.57,.91)*f1_3+
    vec4(2.69,1.07,1.96,1.31))/1.4+f1_0;
vec4 f2_1=sin(mat4(.24,-.40,-.57,.16,-.06,-.47,.36,.65,-.20,-.54,.51,-.29,-.34,.56,-.60,.23)*f1_0+
    mat4(-.41,.64,-.07,-.10,-.18,.28,-.18,.59,-.90,-.86,-.53,.17,-.72,-.19,-.49,.17)*f1_1+
    mat4(.49,-.38,.74,.05,-.16,.24,-.23,-.77,-.87,.16,.12,.22,-.01,.45,-.06,-.58)*f1_2+
    mat4(.72,.55,-.45,-.64,-.18,.48,.27,.00,-.50,-.31,.35,-.16,.37,.62,-.64,.34)*f1_3+
    vec4(-.47,3.29,1.55,-2.64))/1.4+f1_1;
vec4 f2_2=sin(mat4(-.09,.16,.28,.38,-.55,.40,-.32,-.42,-.13,-.28,.37,-.38,-1.09,.14,-.54,-.71)*f1_0+
    mat4(.13,-.51,-.18,-.37,-.19,.44,.14,-.39,-.59,-.12,-.69,.54,.40,-.22,-.22,-.39)*f1_1+
    mat4(.06,-.62,.26,-.02,.38,-.18,.04,.24,.16,.40,.42,-.34,.33,-.53,.45,-.08)*f1_2+
    mat4(.02,-.12,-.40,-.60,.13,.01,.16,.43,-.42,.31,.06,-.31,.29,.23,.98,.74)*f1_3+
    vec4(2.69,2.94,-1.01,-2.65))/1.4+f1_2;
vec4 f2_3=sin(mat4(.46,-.37,.18,.06,-.07,.64,.39,.66,.80,-.07,-.42,.19,-.08,.22,.82,.90)*f1_0+
    mat4(-.53,.33,-.24,-.08,.05,.39,-.54,.25,-.31,-.44,.36,-.20,.05,.32,.04,-.14)*f1_1+
    mat4(-.10,.14,-.49,.69,-.34,.00,.63,-.62,.47,.64,-.36,.60,-.13,-.11,-.08,.19)*f1_2+
    mat4(-.30,.33,-.40,-.59,.29,-.40,-.02,-.34,.58,.36,-.62,.14,.32,-.28,.71,.57)*f1_3+
    vec4(1.74,-3.50,3.36,-2.64))/1.4+f1_3;
vec4 f3_0=sin(mat4(-.71,-.34,-.60,.44,-.20,-.44,.26,.36,-.11,.43,-.59,.50,.72,.19,.27,-.59)*f2_0+
    mat4(-.26,.13,-.22,-.44,.40,-.43,-.94,-.35,-.61,.86,-.22,.01,.00,-.54,-.05,-.77)*f2_1+
    mat4(-.06,.27,-.30,.65,.45,-.21,-.18,-.34,-.82,-.04,-.08,-.33,.58,-.41,-.30,.58)*f2_2+
    mat4(-.49,.25,.21,-.29,.59,-.17,-.18,-.65,-.36,-.29,.26,-.17,.42,.33,-.17,.46)*f2_3+
    vec4(2.57,1.31,2.55,-2.20))/1.7+f2_0;
vec4 f3_1=sin(mat4(-.85,.51,-.51,-.17,.06,-.22,.97,.25,-.26,.60,1.17,.49,-.61,.42,-.01,-.30)*f2_0+
    mat4(.05,-.57,-.51,-.17,-1.11,-.35,-.53,.23,.10,-.10,.46,.42,.10,-.14,-.15,.45)*f2_1+
    mat4(.47,.24,.49,.36,-.26,-.14,-.05,-.30,-.45,.52,.46,.06,.79,-.28,-.14,.13)*f2_2+
    mat4(.06,.54,.23,-.26,-.71,-.66,.01,-.10,.45,-.79,-.44,-.04,-.05,.21,.19,-.25)*f2_3+
    vec4(1.04,-1.39,.70,2.13))/1.7+f2_1;
vec4 f3_2=sin(mat4(.09,-.01,.06,-.23,.17,.11,-.69,.40,-.23,-.27,-.20,-.31,.24,-.05,-1.01,-.40)*f2_0+
    mat4(.12,-.57,-.09,-.23,-.01,-.04,.20,-.17,.11,-.01,-.00,-.08,.01,.49,-.13,.10)*f2_1+
    mat4(-.86,-.36,.80,-.40,.02,-.25,-.32,.13,.17,-.24,.05,-.56,.77,-.57,.70,-.81)*f2_2+
    mat4(.27,-.78,.62,.24,.08,.38,-.43,.20,-.30,.19,-.14,.17,.13,.30,.98,-.41)*f2_3+
    vec4(2.80,2.10,1.46,2.69))/1.7+f2_2;
vec4 f3_3=sin(mat4(-.26,-.09,-.00,-.49,.72,.36,-.01,.01,-.48,.24,.35,-.04,-.80,1.03,.42,.44)*f2_0+
    mat4(-.71,.07,-.31,-.48,-.08,.12,.49,-.38,.44,.52,.21,-.23,.58,.14,.57,.29)*f2_1+
    mat4(.50,.43,-.12,-.77,-.10,.11,.49,-.14,-.04,.10,.66,.23,-.20,.48,.17,-.14)*f2_2+
    mat4(-.80,-.21,.11,.56,-.23,.51,-.22,.04,-.64,.48,-.01,.44,.18,.17,-.46,.06)*f2_3+
    vec4(3.37,2.20,-.28,-3.92))/1.7+f2_3;
vec4 f4_0=sin(mat4(-.61,-.74,-.37,1.17,.20,.00,.10,-.86,.50,-.55,-.27,-.25,-.07,.07,-.48,.52)*f3_0+
    mat4(.38,.15,-.53,.04,-.31,-.53,-.05,.39,.00,-.45,-.20,-.26,-.44,.26,-.30,-.16)*f3_1+
    mat4(-.42,-.07,.11,-.02,-.25,.14,.19,.18,.86,.65,.91,-.42,-.30,.54,.52,.88)*f3_2+
    mat4(.04,.58,.65,.06,.58,.11,-.73,-.16,-.67,-.42,.99,.52,-.08,.08,.04,-.29)*f3_3+
    vec4(-.69,-2.66,-2.79,2.27))/2.0+f3_0;
vec4 f4_1=sin(mat4(-.02,-.15,-.22,-.62,-.18,-.58,.73,-.17,.42,-.34,.99,.28,.65,.07,-.27,.18)*f3_0+
    mat4(-.57,-.72,-.51,.54,.85,-.85,-.02,.06,-.69,.41,.20,.86,-.69,.12,-.47,.48)*f3_1+
    mat4(-.44,.26,-1.27,-.12,.70,-.47,-.16,-.22,-.37,-.19,-.09,.01,-.57,.12,-.38,.65)*f3_2+
    mat4(.27,-.19,-.04,-.53,.10,.53,.45,-.32,1.43,.03,.32,.14,.41,-.15,-.09,-.49)*f3_3+
    vec4(-1.20,1.06,-2.59,-3.50))/2.0+f3_1;
vec4 f4_2=sin(mat4(-.09,.01,-.87,.42,-.02,-.76,.09,-.08,-.70,.14,-1.02,.64,-.37,.55,1.24,.27)*f3_0+
    mat4(-.16,-.13,.82,-.34,.47,.80,.32,-.27,-.48,.40,1.22,-.75,-.50,.34,-.16,-.33)*f3_1+
    mat4(-.03,.21,-.31,.57,.15,.39,-.05,.24,.79,.40,1.26,.38,.24,.80,.00,-.55)*f3_2+
    mat4(.42,.59,-.91,.05,-.55,.08,-.17,.00,.54,-.41,.95,1.16,-.16,-.63,-.79,-.09)*f3_3+
    vec4(1.72,.91,-2.96,1.56))/2.0+f3_2;
vec4 f4_3=sin(mat4(-.13,-.03,-.03,.34,.54,.02,.23,.26,.28,.60,.43,-.12,-.36,-.23,.27,.07)*f3_0+
    mat4(.21,-.34,-.72,1.08,-.31,-.69,-.20,.46,-.27,.49,.22,.59,.35,-.63,-.25,-.10)*f3_1+
    mat4(-.10,-.30,.67,-.64,-1.02,-.13,-.35,.00,.06,-.55,-.30,.84,-.29,.06,-.70,-.35)*f3_2+
    mat4(-.32,-.12,.72,.11,.44,.24,-.50,.56,-.15,.46,-.38,-.84,-.14,-.34,.27,-.49)*f3_3+
    vec4(1.46,1.73,2.10,1.27))/2.0+f3_3;
return dot(f4_0,vec4(-.06,.05,.04,-.06))+
    dot(f4_1,vec4(-.01,.03,-.01,-.04))+
    dot(f4_2,vec4(.11,.03,.01,-.03))+
    dot(f4_3,vec4(.06,.04,.03,.03))+
    0.049;

}


float sdfUnion(float d1, float d2)
{
    return min(d1, d2);
}

/////////////////////////////////////////////////////
//// Step 3: scene sdf
//// You are asked to use the sdf boolean operations to draw the bunny and the cow in the scene.
//// The bunny is located in the ceter of vec3(-1.0, 1., 4.), and the cow is located in the center of vec3(1.0, 1., 4.).
/////////////////////////////////////////////////////

//// sdf: p - query point
float sdf(vec3 p)
{
    float s = 0.;

    float plane_h = -0.1;

    //// calculate the sdf based on all objects in the scene

    // s = sdfUnion(s, sdfPlane(p, plane_h));
    s = sdfUnion(sdfPlane(p, plane_h), sdfSphere(p - vec3(1.8, 1.5, 3.43), vec3(0.), 0.08));
    s = sdfUnion(s, sdfSphere(p - vec3(2.0, 1.5, 3.35), vec3(0.), 0.08));
    s = sdfUnion(s, sdfCharmander(p - vec3(2.0, 1.0, 4.)));
    s = sdfUnion(s, sdfBulb(p - vec3(-2.0, 1.0, 4.)));
    //adding bulbasaur eyes
    s = sdfUnion(s, sdfSphere(p - vec3(-2.2, 1.2, 3.17), vec3(0.), 0.11));
    s = sdfUnion(s, sdfSphere(p - vec3(-1.6, 1.2, 3.25), vec3(0.), 0.11));

    s = sdfUnion(s, sdfSquirtle(p-vec3(0.0, 1.0, 4.)));
    //// your implementation starts

    //// your implementation ends

    return s;
}

/////////////////////////////////////////////////////
//// ray marching
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 4: ray marching
//// You are asked to implement the ray marching algorithm within the following for-loop.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// ray marching: origin - ray origin; dir - ray direction 
float rayMarching(vec3 origin, vec3 dir)
{

    
    float s = 0.0;
    float t = 0.0; 
    for(int i = 0; i < 100; i++)
    {
        //// your implementation starts

        vec3 p = origin + dir * t; //dir is a constant,

        s = sdf(p);

        t += s; 

        if (s < 1e-12 || t > 100.0)
            break;

        //// your implementation ends
    }
    
    return t;
}

/////////////////////////////////////////////////////
//// normal calculation
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 5: normal calculation
//// You are asked to calculate the sdf normal based on finite difference.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// normal: p - query point
vec3 normal(vec3 p)
{
    float s = sdf(p);          //// sdf value in p
    float dx = 0.01;           //// step size for finite difference

    //// your implementation starts

    vec3 p1 = p; 
    p1.x += dx;

    vec3 p2 = p; 
    p2.x -= dx; 

    vec3 p3 = p; 
    p3.y += dx;

    vec3 p4 = p; 
    p4.y -= dx; 

    vec3 p5 = p; 
    p5.z += dx; 

    vec3 p6 = p; 
    p6.z -= dx; 

    float xVal = (sdf(p1) - sdf(p2)) / (2.0*dx);

    float yVal = (sdf(p3) - sdf(p4)) / (2.0*dx);

    float zVal = (sdf(p5) - sdf(p6)) / (2.0*dx);
    
    return vec3(xVal, yVal, zVal);
}

/////////////////////////////////////////////////////
//// Phong shading
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 6: lighting and coloring
//// You are asked to specify the color for the two neural SDF objects in the scene.
//// Each object must have a separate color without mixing.
//// Notice that we have implemented the default Phong shading model for you.
/////////////////////////////////////////////////////

vec3 phong_shading(vec3 p, vec3 n)
{
    // background
    // if(p.z > 20.0)
    // {
    //     vec3 color = vec3(0.0, 0.67, 1.0);
    //     return color;
    // }

    //// phong shading
    vec3 lightPos = vec3(4. * sin(iTime), 4., 4. * cos(iTime));
    vec3 l = normalize(lightPos - p);
    float amb = 0.1;
    float dif = max(dot(n, l), 0.) * 0.7;
    vec3 eye = CAM_POS;
    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.9;

    vec3 sunDir = normalize(vec3(0, 1, -1)); //// parallel light direction
    float sunDif = max(dot(n, sunDir), 0.) * 0.2;

    //// shadow
    float s = rayMarching(p + n * 0.02, l);
    if(s < length(lightPos - p))
        dif *= .2;

    vec3 color = vec3(1.0);

    //// your implementation starts




    if (sdfCharmander(p - vec3(2.0, 1.0, 4.)) < 0.01){
        color = vec3(1.0, 0.5, 0.0);
    }

    if (sdfBulb(p - vec3(-2.0, 1.0, 4.)) < 0.01 ){
        color = vec3(0.0, 1.0, 0.0);
    }

    if (sdfSquirtle(p - vec3(0.0, 1.0, 4.)) < 0.01 ){
        color = vec3(0.53, 0.81, 0.92);
    }

    return (amb + dif + spec + sunDif) * color;
}

/////////////////////////////////////////////////////
//// main function
/////////////////////////////////////////////////////

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;         //// screen uv
    vec3 origin = CAM_POS;                                                  //// camera position 
    vec3 dir = normalize(vec3(uv.x, uv.y, 1));                              //// camera direction
    float s = rayMarching(origin, dir);                                     //// ray marching
    vec3 p = origin + dir * s;                                              //// ray-sdf intersection
    vec3 n = normal(p);                                                     //// sdf normal
    vec3 color = phong_shading(p, n);                                       //// phong shading
    fragColor = vec4(color, 1.);                                            //// fragment color
}

void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}